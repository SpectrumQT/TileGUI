;
; How To Change Key Bindings
;
; 1. Find button (i.e. [KeyLeftButtonClick])
; 2. Find line below 'Xbox Gamepad Binding', 'Keyboard Binding' or 'Mouse Binding' comment
; 3. Replace 'key = OLD_KEY_CODE' with 'key = NEW_KEY_CODE'
; 
; Key Codes:
; * For Gamepad buttons, use following codes:
;     XB_LEFT_TRIGGER, XB_RIGHT_TRIGGER,
;     XB_LEFT_SHOULDER, XB_RIGHT_SHOULDER,
;     XB_LEFT_THUMB, XB_RIGHT_THUMB,
;     XB_DPAD_UP, XB_DPAD_DOWN, XB_DPAD_LEFT, XB_DPAD_RIGHT,
;     XB_A, XB_B, XB_X, XB_Y, XB_START, XB_BACK, XB_GUIDE
; * For A-Z and 0-9 on the number row, just use that single character
; * For everything else (including mouse buttons) use the Virtual Key Code
;     - Virtual Key Codes list: https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes
;     - Usage of 'VK_' prefix is optional, you can specify buttons with or without it
;
; Key Combination:
; * To specify key combination, separate key names with spaces (e.g. "SHIFT ALT Q")
;
; Modifiers:
; * To specify key that should NOT be held for binding to activate use 'NO_' prefix (e.g. "NO_ALT CTRL F1")
; * To exclude all standard modifiers (Ctrl, Alt, Shift, Windows) use 'NO_MODIFIERS' (e.g. "NO_MODIFIERS VK_LBUTTON")


; Configuration -------------------------

[CommandListSetupConfiguration]
; Affects the Horizontal Speed of Virtual Cursor controlled via Gamepad or Keyboard
; For reasonable speed keep the value between 0.25 and 2.0
$cursor_sensivity_x = 0.5
; Affects the Vertical Speed of Virtual Cursor controlled via Gamepad or Keyboard
; For reasonable speed keep the value between 0.25 and 2.0
$cursor_sensivity_y = 0.5


; General Hotkeys -------------------------

; Action: Toggle (Show/Hide) Mod's GUI
[KeyToggleGUI]
; Xbox Gamepad Binding:
key = XB_START XB_BACK
; Keyboard Binding:
key = SHIFT ALT T
; Mouse Binding:
; Doesn't have much sense for mouse tbh
;------------------------------------------
; Input Configuration:
type = cycle
$toggle_gui = 0,1


; Suggested Action: Select or Toggle UI element hovered over by cursor
[KeyLeftButtonClick]
; Xbox Gamepad Binding:
key = XB_X
; Keyboard Binding:
key = SHIFT ALT Q
; Mouse Binding:
key = VK_LBUTTON
;------------------------------------------
; Input Configuration:
type = hold
$mouse_left_state = 1
run = CommandListHandleMouseLeft


; Suggested Action: Deselect or Configure UI element hovered over by cursor
[KeyRightButtonClick]
; Xbox Gamepad Binding:
key = XB_B
; Keyboard Binding:
key = SHIFT ALT E
; Mouse Binding:
key = VK_RBUTTON
;------------------------------------------
; Input Configuration:
type = hold
$mouse_right_state = 1
run = CommandListHandleMouseRight


; Suggested Action: Drag or Scroll UI element hovered over by cursor
[KeyMiddleButtonClick]
; Xbox Gamepad Binding:
key = XB_Y
; Keyboard Binding:
key = SHIFT ALT R
; Mouse Binding:
key = VK_MBUTTON
;------------------------------------------
; Input Configuration:
type = hold
$mouse_mid_state = 1
run = CommandListHandleMouseMid


; Suggested Action: Close Child Panel or Go To Previous UI State
[KeyBackwardButtonClick]
; Xbox Gamepad Binding:
key = XB_BACK
; Keyboard Binding:
key = SHIFT ALT Z
; Mouse Binding:
key = VK_XBUTTON1
;------------------------------------------
; Input Configuration:
type = hold
$mouse_backward_state = 1
run = CommandListHandleMouseBackward


; Suggested Action: Open Child Panel or Go To Next UI State
[KeyForwardButtonClick]
; Xbox Gamepad Binding:
key = XB_START
; Keyboard Binding:
key = SHIFT ALT X
; Mouse Binding:
key = VK_XBUTTON2
;------------------------------------------
; Input Configuration:
type = hold
$mouse_forward_state = 1
run = CommandListHandleMouseForward


; Virtual Cursor Hotkeys -------------------------

; Action: Hide Virtual Cursor
[KeyVirtualCursorHide]
; Xbox Gamepad Binding:
; Doesn't have much sense for gamepad tbh
; Keyboard Binding:
key = SHIFT ALT A D
key = SHIFT ALT W S
;------------------------------------------
; Input Configuration:
run = CommandListHideVirtualCursor


; Action: Move Virtual Cursor in LEFT direction
[KeyVirtualCursorLeft]
; Xbox Gamepad Binding:
key = XB_DPAD_LEFT
; Keyboard Binding:
key = SHIFT ALT A
;------------------------------------------
; Input Configuration:
type = hold
$arrow_left_state = 1


; Action: Move Virtual Cursor in RIGHT direction
[KeyVirtualCursorRight]
; Xbox Gamepad Binding:
key = XB_DPAD_RIGHT
; Keyboard Binding:
key = SHIFT ALT D
;------------------------------------------
; Input Configuration:
type = hold
$arrow_right_state = 1


; Action: Move Virtual Cursor in UP direction
[KeyVirtualCursorUp]
; Xbox Gamepad Binding:
key = XB_DPAD_UP
; Keyboard Binding:
key = SHIFT ALT W
;------------------------------------------
; Input Configuration:
type = hold
$arrow_top_state = 1


; Action: Move Virtual Cursor in DOWN direction
[KeyVirtualCursorDown]
; Edit the line below to change key binding:
key = XB_DPAD_DOWN
; Keyboard Binding:
key = SHIFT ALT S
;------------------------------------------
; Input Configuration:
type = hold
$arrow_down_state = 1



;=================================================================================================
;=  DO NOT EDIT THE CODE BELOW IF YOU'RE NOT SURE WHAT YOU'RE DOING!!!
;=================================================================================================

; Constants -------------------------

[Constants]
global $initialized = 0

global $cursor_sensivity_x = 0
global $cursor_sensivity_y = 0

global $toggle_gui = 0
global $mouse_left_state = 0
global $mouse_left_counter = 1
global $mouse_right_state = 0
global $mouse_right_counter = 1
global $mouse_mid_state = 0
global $mouse_mid_counter = 1
global $mouse_backward_state = 0
global $mouse_backward_counter = 1
global $mouse_forward_state = 0
global $mouse_forward_counter = 1

global $virtual_cursor_hide_cooldown = 0
global $arrow_left_state = 0
global $arrow_right_state = 0
global $arrow_top_state = 0
global $arrow_down_state = 0


; Present -------------------------

[Present]
; Load configuration values
if $initialized == 0
    $initialized = 1
    run = CommandListSetupConfiguration
endif

; Update states of buttons in TileGUI.ini
; Button state is encoded in a following way:
; * Each button press increases counter's absolute value by 1
; * When button is DOWN (held aka pressed), counter value is positive 
; * When button is UP (released), counter value is negative 
; This way client .ini may easily detect:
; * Button state changes
;   local $last_mouse_left_state
;   if $last_mouse_left_state != $\TileGUI\mouse_left
;       ; Do something if button state changed
;   endif
; * Button state
;   if $\TileGUI\mouse_left < 0
;       ; Do something if button is UP
;   else
;       ; Do something if button is DOWN
;   endif
; * Arbitrary amount of presses within timeframe (i.e. double clicks)
;   local $first_press_time
;   local $first_press_state
;   local $abs_state = ($\TileGUI\mouse_left**2)**(1/2)
;   if time - $first_press_time < 0.500
;       if $abs_state - $first_press_state >= 1
;           ; Do something if left mouse button was pressed 2 times within 500ms interval
;       endif
;   else
;       $first_press_time = time
;       $first_press_state = $abs_state
;   endif
local $prev_mouse_left_state
if $mouse_left_state != $prev_mouse_left_state 
    $prev_mouse_left_state = $mouse_left_state
    if $mouse_left_state == 0
        $\TileGUI\mouse_left = -$mouse_left_counter
    else
        $\TileGUI\mouse_left = $mouse_left_counter
    endif
endif
local $prev_mouse_right_state
if $mouse_right_state != $prev_mouse_right_state 
    $prev_mouse_right_state = $mouse_right_state
    if $mouse_right_state == 0
        $\TileGUI\mouse_right = -$mouse_right_counter
    else
        $\TileGUI\mouse_right = $mouse_right_counter
    endif
endif
local $prev_mouse_mid_state
if $mouse_mid_state != $prev_mouse_mid_state 
    $prev_mouse_mid_state = $mouse_mid_state
    if $mouse_mid_state == 0
        $\TileGUI\mouse_mid = -$mouse_mid_counter
    else
        $\TileGUI\mouse_mid = $mouse_mid_counter
    endif
endif
local $prev_mouse_forward_state
if $mouse_forward_state != $prev_mouse_forward_state 
    $prev_mouse_forward_state = $mouse_forward_state
    if $mouse_forward_state == 0
        $\TileGUI\mouse_forward = -$mouse_forward_counter
    else
        $\TileGUI\mouse_forward = $mouse_forward_counter
    endif
endif
local $prev_mouse_backward_state
if $mouse_backward_state != $prev_mouse_backward_state 
    $prev_mouse_backward_state = $mouse_backward_state
    if $mouse_backward_state == 0
        $\TileGUI\mouse_backward = -$mouse_backward_counter
    else
        $\TileGUI\mouse_backward = $mouse_backward_counter
    endif
endif
local $prev_toggle_gui
if $toggle_gui != $prev_toggle_gui 
    $prev_toggle_gui = $toggle_gui
    $\TileGUI\toggle_gui = $toggle_gui
endif


; Update Virtual Cursor coords in TileGUI.ini based on pressed arrow buttons
if time > $virtual_cursor_hide_cooldown
    if $arrow_left_state == 1
        $\TileGUI\virtual_cursor_x = $\TileGUI\virtual_cursor_x - 10 * $cursor_sensivity_x
    endif
    if $arrow_right_state == 1
        $\TileGUI\virtual_cursor_x = $\TileGUI\virtual_cursor_x + 10 * $cursor_sensivity_x
    endif
    if $arrow_top_state == 1
        $\TileGUI\virtual_cursor_y = $\TileGUI\virtual_cursor_y + 10 * $cursor_sensivity_y
    endif
    if $arrow_down_state == 1
        $\TileGUI\virtual_cursor_y = $\TileGUI\virtual_cursor_y - 10 * $cursor_sensivity_y
    endif
endif


; Button Handlers -------------------------

[CommandListHandleMouseLeft]
$mouse_left_counter = $mouse_left_counter + 1


[CommandListHandleMouseRight]
$mouse_right_counter = $mouse_right_counter + 1


[CommandListHandleMouseMid]
$mouse_mid_counter = $mouse_mid_counter + 1


[CommandListHandleMouseBackward]
$mouse_backward_counter = $mouse_backward_counter + 1


[CommandListHandleMouseForward]
$mouse_forward_counter = $mouse_forward_counter + 1


[CommandListHideVirtualCursor]
$virtual_cursor_hide_cooldown = time + 1
$\TileGUI\virtual_cursor_x = -1
$\TileGUI\virtual_cursor_y = -1


; EOF -------------------------
