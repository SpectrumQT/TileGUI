; ----------------------------------------------------------------
; !!! WARNING !!! Do NOT use this .ini as template for your GUI code!
; ----------------------------------------------------------------
; This module is used to draw fake mouse cursor for universal keyboard and gamepad support
; Requires to be called the last to overlay other GUIs, so it uses a bit different render approach 

namespace=TileGUI_VirtualCursor


[CommandListDrawVirtualCursor]
if $\TileGUI\virtual_cursor_x != -1 || $\TileGUI\virtual_cursor_y != -1
    $gui_active = 1
    run = CommandListOnFrameDrawGUI
endif


[Constants]
; Variables: TileGUI Instance Core
global $api_status = -1
global $gui_initialized = 0
global $gui_active = 0
global $gui_scale = 1.0
; Constants: TileGUI Tile Ids
global $TILE_VIRTUAL_CURSOR = 0


; TileGUI Resources -------------------------

[ResourceTextureVirtualCursor]
filename = Textures\virtual_cursor.dds

[ResourceTextureVirtualCursorOverride]


; TileGUI Tiles -------------------------

[CommandListRegisterTiles]
$\TileGUI\target_tile_id = $TILE_VIRTUAL_CURSOR
$\TileGUI\width = 32 * $gui_scale
$\TileGUI\height = 32 * $gui_scale
$\TileGUI\texture_id = 64
run = CommandList\TileGUI\SetTile


; TileGUI Controller -------------------------

[CommandListOnGuiFrame]
if ResourceTextureVirtualCursorOverride !== null
    ps-t64 = ResourceTextureVirtualCursorOverride
else
    ps-t64 = ResourceTextureVirtualCursor
endif

local $offset_x
local $offset_y

local $new_offset_x = $\TileGUI\virtual_cursor_x + 16
local $new_offset_y = $\TileGUI\virtual_cursor_y - 16

if $new_offset_x != $offset_x || $new_offset_y != $offset_y
    $offset_x = $new_offset_x
    $offset_y = $new_offset_y

    $\TileGUI\target_tile_id = $TILE_VIRTUAL_CURSOR
    $\TileGUI\offset_x = $new_offset_x
    $\TileGUI\offset_y = $new_offset_y
    run = CommandList\TileGUI\SetTile
endif


; TileGUI Instance Configuration -------------------------

; === START: TILEGUI INSTANCE CONFIGURATION === === === === === === === === === === === === === === === === ===
; Here you can adjust this instance to fit your needs
; Please don't set those values any higer than you actually need, don't load GPU with useless work
; =================================================================================================
[CommandListSetConfiguration]
; Configure minimal required TileGUI version
; User with older TileGUI version will get Error Message displayed and to ensure user safety GUI won't run
$\TileGUI\required_version = 0.80
; Configure the number of tiles to process (allowed values: 128, 256, 512, 1024)
; Pick the lowest acceptable value from the allowed ones (i.e. for 17 tile GUI pick 128)
; WARNING! For this setting to have effect, you should also resize [ResourceTilesData]:
; For example, for $max_tiles_count = 256, find 'array = 128' in [ResourceTilesData] below and replace with 'array = 256'
$\TileGUI\max_tiles_count = 128
; Configure the number of GUI layers to process (allowed values: 1 ... 32)
; For most cases 1 layer is enough because within one layer tiles with higher TileID are always rendered on top of ones with lower 
$\TileGUI\max_layers_count = 1
; Configure the max length of parent chain checked by per-frame tile positions updates (allowed values: 0 ... 8)
; Set it to 0 if you're not going to use draggable windows in your GUI, otherwise make sure to not go above 8 
$\TileGUI\max_parent_recursion = 0
; Configure how much screen scale should affect tile sizes
; Default factor of 0.25 makes tiles 25% bigger for each 100% of scale above base 100%
; For 4k displays Windows returns 300% scale, so factor of 0.25 will make tiles 50% bigger
$\TileGUI\scaling_factor = 0.25
; === END: TILEGUI INSTANCE CONFIGURATION === === === === === === === === === === === === === === === === === ===


; === START: TILEGUI INSTANCE RESOURCES === === === === === === === === === === === === === === === === === === ===

; Stores tiles
; Allowed array length values: 128, 256, 512, 1024 (default: array = 128)
[ResourceTilesData]
type = RWStructuredBuffer
array = 128
data = R32_FLOAT  0 0 0 0   0 0 0 0   0 0 0 0   0 0 0 0   0 0 0 0   0 0 0 0   0 0 0 0   0 0 0 0   0 0 0 0   0 0 0 0

; Stores templates
; Allowed array length values: 64, 128, 256, 512, 1024 (default: array = 64)
[ResourceTemplatesData]
type = RWStructuredBuffer
array = 64
data = R32_FLOAT  0 0 0 0   0 0 0 0   0 0 0 0   0 0 0 0   0 0 0 0   0 0 0 0   0 0 0 0   0 0 0 0   0 0 0 0   0 0 0 0

; === END: TILEGUI INSTANCE RESOURCES === === === === === === === === === === === === === === === === === === === ===


; TileGUI Instance Core -------------------------

; WARNING! TILEGUI INSTANCE CORE CODE IS LISTED BELOW, DO NOT EDIT IF YOU'RE NOT SURE WHAT YOU'RE DOING!!!

[ResourceInstance]
type = RWStructuredBuffer
array = 1
data = R32_FLOAT  0 0 0 0   0 0 0 0   0 0 0 0

; Error message displayed to user when CommandListOnFrameDrawGUI code is FUBAR
[ResourceErrorCoreIsFUBAR]
type = Buffer
data = "Error! Virtual Cursor Core is FUBAR"

; Error message displayed to user when TileGUI is not installed
[ResourceErrorNotInstalledTileGUI]
type = Buffer
data = "Error! Virtual Cursor requires TileGUI to function! Please install TileGUI from https://gamebanana.com/mods/505941"

; Error message displayed to user when TileGUI version is below than minimally required
[ResourceErrorWrongVersionTileGUI]
type = Buffer
data = "Error! Virtual Cursor requires newer TileGUI version to function! Please update TileGUI from https://gamebanana.com/mods/505941"

; Error mesage display parameters
[ResourceErrorMessageFormat]
type = StructuredBuffer
array = 1
data = R32_FLOAT  -0.25 -0.85 +0.25 -0.90   1.00 1.00 0.00 1.00   0.00 0.00 0.00 0.95   0.02  0.05   2 3   1   1.0
;                x1-^  y1-^  x2-^  y2-^   | R-^  G-^  B-^  A-^  | R-^  G-^  B-^  A-^  | ^-H    V-^ | ^ ^ | ^- text alignment: 0=left 1=center 2=right | ^- font scale
;                Rectangle (range -1:+1)  | Text Color          | Background Color    | Border     |  ^- h/v-anchor: 0=none 1=left/top 2=center 3=right/bottom 

[CommandListOnFrameDrawGUI]
post $gui_active = 0

if $gui_active == 1

    if $gui_initialized == 0
        ; Pass our instance data to the library 
        run = CommandListConnectLibrary
        ; Initialize API status as 'FUBAR'
        $api_status = -1
        ; Declare local variables so we can compare potentially non-existing $\TileGUI\ values
        local $api_version = -1
        local $api_required_version = -1
        ; If TileGUI is installed, this value is set by CommandListSetConfiguration via CommandListConnectLibrary
        ; If TileGUI is missing, it defaults to -1
        $api_required_version = $\TileGUI\required_version
        ; Detect actual API status
        if $api_required_version != -1
            ; Get version of currently installed TileGUI
            run = CommandList\TileGUI\GetVersion
            $api_version = $\TileGUI\return_version

            if $api_version >= $api_required_version
                ; Change API status to 'OK'
                $api_status = 200
            else
                ; Change API status to 'Upgrade Required'
                $api_status = 426
            endif
        else
            ; Change API status to 'Not Found'
            $api_status = 404
        endif
        ; Initialize GUI if API status is 'OK'
        if $api_status == 200
            ; Initialize instance data
            run = CommandListInitializeDataStorage
        endif
        ; Remember that we're initialized so we don't have to do it again
        $gui_initialized = 1
    endif

    if $api_status == 200
        ; Pass our instance data to the library 
        run = CommandListConnectLibrary
        ; Execute user per-frame GUI logic
        run = CommandListOnGuiFrame
        ; Draw GUI to back buffer to show on next frame if there are layers to draw
        run = CommandListDrawGUI
        ; Detach our instance data from the library 
        run = CommandListDisconnectLibrary
    else
        if $api_status == 404
            ; Display TileGUI Not Installed Error Message
            Resource\ShaderFixes\help.ini\Help = ref ResourceErrorNotInstalledTileGUI
        else if $api_status == 426
            ; Display TileGUI Wrong Version Error Message
            Resource\ShaderFixes\help.ini\Help = ref ResourceErrorWrongVersionTileGUI
        else
            ; Display Core Is FUBAR Error Message
            Resource\ShaderFixes\help.ini\Help = ref ResourceErrorCoreIsFUBAR
        endif
        Resource\ShaderFixes\help.ini\Params = ref ResourceErrorMessageFormat
        run = CustomShader\ShaderFixes\help.ini\FormatText
    endif
else if $api_status != 200
    ; Clean Up Error Message
    if $gui_initialized == 1
        $gui_initialized = 0
        Resource\ShaderFixes\help.ini\Help = null
        Resource\ShaderFixes\help.ini\Params = null
    endif
endif


[CommandListConnectLibrary]
; Clear any leftover data
run = CommandList\TileGUI\ResetTempVars
; Pass configuration variables
run = CommandListSetConfiguration
; Pass our data storage to the library
Resource\TileGUI\ClientInstanceData = reference ResourceInstance
Resource\TileGUI\ClientTilesData = reference ResourceTilesData
Resource\TileGUI\ClientTemplatesData = reference ResourceTemplatesData


[CommandListInitializeDataStorage]
; Load our instance configuration to the data storage
run = CommandList\TileGUI\SetInstance
; Load our tiles to the data storage
run = CommandListRegisterTiles


[CommandListDrawGUI]
; Run compute shader to process "shader-accelerated" features like hover-overlays, loops and dragging
run = CustomShader\TileGUI\TileFeaturesService
; Run compute shader to update tile positions
run = CustomShader\TileGUI\TilePositionService
; Run GUI shaders
run = CustomShader\TileGUI\TileDrawService


[CommandListDisconnectLibrary]
Resource\TileGUI\ClientInstanceData = null
Resource\TileGUI\ClientTilesData = null
Resource\TileGUI\ClientTemplatesData = null
ResourceTextureVirtualCursorOverride = null


; EOF -------------------------
