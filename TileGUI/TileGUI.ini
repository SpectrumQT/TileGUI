; TileGUI v0.8.1 BETA
; Simple yet powerful GUI framework for XXMI
; https://github.com/SpectrumQT/TileGUI

namespace=TileGUI


; API -------------------------

[CommandListGetVersion]
$return_version = 0.81


[CommandListDrawGUI]
; Run compute shader to process "shader-accelerated" features like hover-overlays, loops and dragging
run = CustomShaderTileFeaturesService
; Run compute shader to update tile positions
run = CustomShaderTilePositionService
; Run GUI shaders
run = CustomShaderTileDrawService
; Draw virtual cursor for gamepad & keyboard controls support
run = CommandList\TileGUI_VirtualCursor\DrawVirtualCursor


[CommandListSetInstance]
if ResourceClientInstanceData !== null
    run = CustomShaderInstanceWriter
    run = CommandListSetScale
endif


[CommandListSetTemplate]
if ResourceClientTemplatesData !== null
    $set_tile_type = 1
    run = CustomShaderTileWriter
endif


[CommandListApplyTemplate]
if ResourceClientTemplatesData !== null
    $request_type = 1
    run = CustomShaderTileGroupWriter
endif


[CommandListApplyLayout]
if ResourceClientTilesData !== null
    $request_type = 2
    run = CustomShaderTileGroupWriter
endif


[CommandListSetTile]
if ResourceClientTilesData !== null
    $set_tile_type = 2
    run = CustomShaderTileWriter
endif


[CommandListSetSliderValue]
if ResourceClientTilesData !== null
    $set_tile_type = 3
    run = CustomShaderTileWriter
endif


[CommandListGetHoveredOverTileId]
if ResourceClientTilesData !== null
    $arg_request_type = 2
    run = CustomShaderTileReader
endif


[CommandListGetSliderValue]
if ResourceClientTilesData !== null
    $arg_request_type = 3
    run = CustomShaderTileReader
endif


[CommandListGetTileVar]
if ResourceClientTilesData !== null
    $arg_request_type = 1
    run = CustomShaderTileReader
endif


[CommandListGetSysStateId]
$arg_tile_var_id = 0
run = CommandListGetTileVar

[CommandListGetLayerId]
$arg_tile_var_id = 1
run = CommandListGetTileVar

[CommandListGetParentTileId]
$arg_tile_var_id = 2
run = CommandListGetTileVar

[CommandListGetDynamicTemplateId]
$arg_tile_var_id = 3
run = CommandListGetTileVar

[CommandListGetShow]
$arg_tile_var_id = 4
run = CommandListGetTileVar

[CommandListGetSelect]
$arg_tile_var_id = 5
run = CommandListGetTileVar

[CommandListGetClamp]
$arg_tile_var_id = 6
run = CommandListGetTileVar

[CommandListGetTrackMouse]
$arg_tile_var_id = 7
run = CommandListGetTileVar

[CommandListGetLoopStartTexArrId]
$arg_tile_var_id = 8
run = CommandListGetTileVar

[CommandListGetLoopEndTexArrId]
$arg_tile_var_id = 9
run = CommandListGetTileVar

[CommandListGetHoverOverlayTileId]
$arg_tile_var_id = 10
run = CommandListGetTileVar

[CommandListGetSelectOverlayTileId]
$arg_tile_var_id = 11
run = CommandListGetTileVar

[CommandListGetWidth]
$arg_tile_var_id = 12
run = CommandListGetTileVar

[CommandListGetHeight]
$arg_tile_var_id = 13
run = CommandListGetTileVar

[CommandListGetTextureId]
$arg_tile_var_id = 14
run = CommandListGetTileVar

[CommandListGetTexArrId]
$arg_tile_var_id = 15
run = CommandListGetTileVar

[CommandListGetTexUvX]
$arg_tile_var_id = 16
run = CommandListGetTileVar

[CommandListGetTexUvY]
$arg_tile_var_id = 17
run = CommandListGetTileVar

[CommandListGetTexUvZ]
$arg_tile_var_id = 18
run = CommandListGetTileVar

[CommandListGetTexUvW]
$arg_tile_var_id = 19
run = CommandListGetTileVar

[CommandListGetOpacity]
$arg_tile_var_id = 20
run = CommandListGetTileVar

[CommandListGetSaturation]
$arg_tile_var_id = 21
run = CommandListGetTileVar

; [CommandListGetReserved1X]
; $arg_tile_var_id = 22
; run = CommandListGetTileVar

; [CommandListGetReserved1Y]
; $arg_tile_var_id = 23
; run = CommandListGetTileVar

[CommandListGetOffsetX]
$arg_tile_var_id = 24
run = CommandListGetTileVar

[CommandListGetOffsetY]
$arg_tile_var_id = 25
run = CommandListGetTileVar

[CommandListGetAnchorX]
$arg_tile_var_id = 26
run = CommandListGetTileVar

[CommandListGetAnchorY]
$arg_tile_var_id = 27
run = CommandListGetTileVar

[CommandListGetLoopStage]
$arg_tile_var_id = 28
run = CommandListGetTileVar

[CommandListGetIsHoveredOver]
$arg_tile_var_id = 29
run = CommandListGetTileVar

; [CommandListGetReserved2X]
; $arg_tile_var_id = 30
; run = CommandListGetTileVar

; [CommandListGetReserved2Y]
; $arg_tile_var_id = 31
; run = CommandListGetTileVar

[CommandListGetAbsPosX]
$arg_tile_var_id = 32
run = CommandListGetTileVar

[CommandListGetAbsPosY]
$arg_tile_var_id = 33
run = CommandListGetTileVar

[CommandListGetAbsPosZ]
$arg_tile_var_id = 34
run = CommandListGetTileVar

[CommandListGetAbsPosW]
$arg_tile_var_id = 35
run = CommandListGetTileVar


; VARIABLES -------------------------

[Constants]
global $return_version = -1
global $required_version = -1
global $window_width = 1920
global $window_height = 1080
; While TileGUI is a stateless library, we still need to pass variables and get results somehow
; So we'll use temp variables that are explicitly getting reset on connect or after a method call
; Also, as we can't exchange 'null' with shaders, we'll mask it with 100000 instead
; This arbitrary big number doesn't have any sense for any value used by this library
;=================================================================================================
; Temp vars of client configuration
global $max_tiles_count = 128
global $max_layers_count = 1
global $max_parent_recursion = 0
global $scaling_factor = 0.25
;=================================================================================================
; Temp vars of user controls
global $toggle_gui = 0
global $mouse_left = 0
global $mouse_right = 0
global $mouse_mid = 0
global $mouse_forward = 0
global $mouse_backward = 0
global $virtual_cursor_x = -1
global $virtual_cursor_y = -1
;=================================================================================================
; Temp vars of CustomShaderInstanceWriter
global $drag_tile_id = 100000
;=================================================================================================
; Temp vars of CustomShaderTileWriter
global $screen_scaling = 1.0
global $set_tile_type = 100000
global $target_template_id = 100000
global $target_tile_id = 100000
global $set_value = 100000
; System config
global $sys_state_id = 100000
global $layer_id = 100000
global $parent_tile_id = 100000
global $template_id = 100000
; Features config
global $show = 100000
global $select = 100000
global $clamp = 100000
global $track_mouse = 100000
; Advanced features config
global $loop_start = 100000
global $loop_method = 100000
global $hover_overlay_tile_id = 100000
global $select_overlay_tile_id = 100000
; Display config
global $width = 100000
global $height = 100000
global $texture_id = 100000
global $tex_arr_id = 100000
; Texture config
global $tex_uv_x = 100000
global $tex_uv_y = 100000
global $tex_uv_z = 100000
global $tex_uv_w = 100000
; Texture config 2
global $opacity = 100000
global $saturation = 100000
; Layout config
global $offset_x = 100000
global $offset_y = 100000
global $anchor_x = 100000
global $anchor_y = 100000
; Current state
global $loop_stage = 100000
;=================================================================================================
; Temp vars of CustomShaderTileGroupWriter
global $request_type = 100000
global $first_tile_id = 100000
global $last_tile_id = 100000
global $create_tiles = 100000
global $skip_existing_tiles = 100000
global $cols_count = 100000
global $rows_count = 100000
global $cols_padding = 100000
global $rows_padding = 100000
;=================================================================================================
; Temp vars of CustomShaderTileReader
global $arg_request_type = 100000
global $arg_tile_var_id = 100000
global $return_var = 100000
;=================================================================================================



; HELPERS -------------------------

; Make sure to make temp variables really 'temp' via calling this method on connect!
[CommandListResetTempVars]
; Reset configuration to defaults
$return_version = -1
$required_version = -1
$max_tiles_count = 128
$max_layers_count = 1
$max_parent_recursion = 0
$scaling_factor = 0.25
; Reset all temp vars used by shaders
run = CommandListResetVarsOfCustomShaderInstanceWriter
run = CommandListResetVarsOfCustomShaderTileWriter
run = CommandListResetVarsOfCustomShaderTileGroupWriter
run = CommandListResetVarsOfCustomShaderTileReader


[CommandListPassWindowInfo]
; Pass a game window size to the shader
if window_width >= 640
    x0 = window_width
    y0 = window_height
; Fall back to backup methods if user gets zeroes due to 3dmigoto bug
else if rt_width >= 640
    x0 = rt_width
    y0 = rt_height
else if res_width >= 640
    x0 = res_width
    y0 = res_height
else
    x0 = $window_width
    y0 = $window_height
endif
; Pass cursor relative coords to the shader
if $virtual_cursor_x == -1 && $virtual_cursor_y == -1
    ; Pass real mouse cursor
    if cursor_x != 0 && cursor_y != 0
        z0 = cursor_x * 2 - 1
        w0 = -(cursor_y * 2 - 1)
    ; Fall back to backup methods if user gets zeroes due to 3dmigoto bug
    else if cursor_window_x != 0 && cursor_window_y != 0
        z0 = (cursor_window_x / x0) * 2 - 1
        w0 = -((cursor_window_y / y0) * 2 - 1)
    else
        z0 = (cursor_screen_x / x0) * 2 - 1
        w0 = -((cursor_screen_y / y0) * 2 - 1)
    endif
else
    ; Pass virtual mouse cursor
    z0 = $\TileGUI\virtual_cursor_x / (x0 / 2)
    w0 = $\TileGUI\virtual_cursor_y / (y0 / 2)
endif


; Set UI scaling factor
[CommandListSetScale]
; Windows returns 96 as effective_dpi for 100% scale
$screen_scaling = effective_dpi / 96
if $screen_scaling > 1.0
	$screen_scaling = 1.0 + ($screen_scaling - 1.0) * $scaling_factor
endif


; INSTANCE WRITER SHADER -------------------------

; Updates client's instance storage with given ini variables
[CustomShaderInstanceWriter]
; Load shader and explicitly unbind other shaders for safety
cs = Shaders/instance_writer.hlsl
vs = null
ps = null
hs = null
ds = null
gs = null
; Pass RWBuffers to communicate with the shader
cs-u0 = ResourceClientInstanceData
; cs-u7 = ResourceDebugRW
; Backup IniParams we are about to use
local $bak_x0 = x0
local $bak_y0 = y0
local $bak_z0 = z0
local $bak_w0 = w0
local $bak_x10 = x10
local $bak_y10 = y10
local $bak_x15 = x15
; Pass a game window size and cursor relative coords to the shader
run = CommandListPassWindowInfo
; Pass variables to the shader
x10 = $max_tiles_count
y10 = $max_layers_count
x15 = $drag_tile_id
; Run calulations
Dispatch = 1, 1, 1
; Reset variables
run = CommandListResetVarsOfCustomShaderInstanceWriter
; Unbind RWBuffers
post cs-u0 = null
; Restore IniParams:
post x0 = $bak_x0
post y0 = $bak_y0
post z0 = $bak_z0
post w0 = $bak_w0
post x10 = $bak_x10
post y10 = $bak_y10
post x15 = $bak_x15

[CommandListResetVarsOfCustomShaderInstanceWriter]
$drag_tile_id = 100000


; TILE WRITER SHADER -------------------------

; Updates client's tile storage with given ini variables
[CustomShaderTileWriter]
; Load shader and explicitly unbind other shaders for safety
cs = Shaders/tile_writer.hlsl
vs = null
ps = null
hs = null
ds = null
gs = null
; Backup IniParams we are about to use
local $bak_x1 = x1
local $bak_y1 = y1
local $bak_z1 = z1
local $bak_w1 = w1
local $bak_x2 = x2
local $bak_y2 = y2
local $bak_z2 = z2
local $bak_w2 = w2
local $bak_x3 = x3
local $bak_y3 = y3
local $bak_z3 = z3
local $bak_w3 = w3
local $bak_x4 = x4
local $bak_y4 = y4
local $bak_z4 = z4
local $bak_w4 = w4
local $bak_x5 = x5
local $bak_y5 = y5
local $bak_z5 = z5
local $bak_w5 = w5
local $bak_x6 = x6
local $bak_y6 = y6
local $bak_z6 = z6
local $bak_w6 = w6
local $bak_x7 = x7
local $bak_y7 = y7
local $bak_z7 = z7
local $bak_w7 = w7
local $bak_x8 = x8
local $bak_y8 = y8
local $bak_z8 = z8
local $bak_w8 = w8
local $bak_x9 = x9
; local $bak_y9 = y9
; local $bak_z9 = z9
; local $bak_w9 = w9
; Pass RWBuffers to communicate with the shader
cs-u0 = ResourceClientTemplatesData
cs-u1 = ResourceClientTilesData
; cs-u7 = ResourceDebugRW
; For template we should pass only TemplateId
if $set_tile_type == 1
    x1 = 1
    y1 = $target_template_id
; For regular tile we should pass both TileID and TemplateId (TemplateId is optional though)
else if $set_tile_type == 2
    x1 = 2
    y1 = $template_id
    z1 = $target_tile_id
else if $set_tile_type == 3
    x1 = 3
    z1 = $target_tile_id
    w1 = $set_value
endif
; Pass a tile update data to the shader
; System config
x2 = $sys_state_id
y2 = $layer_id
z2 = $parent_tile_id
w2 = $template_id
; Features config
x3 = $show
y3 = $select
z3 = $clamp
w3 = $track_mouse
; Advanced features config
x4 = $loop_start
y4 = $loop_method
z4 = $hover_overlay_tile_id
w4 = $select_overlay_tile_id
; Display config
if $width == 100000
	x5 = $width
else
	x5 = $width * $screen_scaling
endif
if $height == 100000
	y5 = $height
else
	y5 = $height * $screen_scaling
endif
z5 = $texture_id
w5 = $tex_arr_id
; Texture config
x6 = $tex_uv_x
y6 = $tex_uv_y
z6 = $tex_uv_z
w6 = $tex_uv_w
; Texture config 2
x7 = $opacity
y7 = $saturation
; z7 = $reserved_1
; w7 = $reserved_1
; Layout config
x8 = $offset_x
y8 = $offset_y
z8 = $anchor_x
w8 = $anchor_y
; Current state
x9 = $loop_stage
; Run calulations
Dispatch = 1, 1, 1
; Reset variables
run = CommandListResetVarsOfCustomShaderTileWriter
; Unbind RWBuffers
post cs-u0 = null
post cs-u1 = null
; Restore IniParams:
post x1 = $bak_x1
post y1 = $bak_y1
post z1 = $bak_z1
post w1 = $bak_w1
post x2 = $bak_x2
post y2 = $bak_y2
post z2 = $bak_z2
post w2 = $bak_w2
post x3 = $bak_x3
post y3 = $bak_y3
post z3 = $bak_z3
post w3 = $bak_w3
post x4 = $bak_x4
post y4 = $bak_y4
post z4 = $bak_z4
post w4 = $bak_w4
post x5 = $bak_x5
post y5 = $bak_y5
post z5 = $bak_z5
post w5 = $bak_w5
post x6 = $bak_x6
post y6 = $bak_y6
post z6 = $bak_z6
post w6 = $bak_w6
post x7 = $bak_x7
post y7 = $bak_y7
post z7 = $bak_z7
post w7 = $bak_w7
post x8 = $bak_x8
post y8 = $bak_y8
post z8 = $bak_z8
post w8 = $bak_w8
post x9 = $bak_x9
; post y9 = $bak_y9
; post z9 = $bak_z9
; post w9 = $bak_w9

[CommandListResetVarsOfCustomShaderTileWriter]
; Request config
$set_tile_type = 100000
$target_template_id = 100000
$target_tile_id = 100000
$set_value = 100000
; System config
$sys_state_id = 100000
$layer_id = 100000
$parent_tile_id = 100000
$template_id = 100000
; Features config
$show = 100000
$select = 100000
$clamp = 100000
$track_mouse = 100000
; Advanced features config
$loop_start = 100000
$loop_method = 100000
$hover_overlay_tile_id = 100000
$select_overlay_tile_id = 100000
; Display config
$width = 100000
$height = 100000
$texture_id = 100000
$tex_arr_id = 100000
; Texture config
$tex_uv_x = 100000
$tex_uv_y = 100000
$tex_uv_z = 100000
$tex_uv_w = 100000
; Texture config 2
$opacity = 100000
$saturation = 100000
; Layout config
$offset_x = 100000
$offset_y = 100000
$anchor_x = 100000
$anchor_y = 100000
; Current state
$loop_stage = 100000


; TILE GROUP WRITER SHADER -------------------------

; Streamlines multiple tiles declaration and property updates both for initialization and runtime
[CustomShaderTileGroupWriter]
; Load shader and explicitly unbind other shaders for safety
cs = Shaders/tile_group_writer.hlsl
vs = null
ps = null
hs = null
ds = null
gs = null
; Pass RWBuffers to communicate with the shader
cs-u0 = ResourceClientTemplatesData
cs-u1 = ResourceClientTilesData
; cs-u7 = ResourceDebugRW
; Backup IniParams we are about to use
local $bak_x0 = x0
local $bak_y0 = y0
local $bak_z0 = z0
local $bak_x1 = x1
local $bak_y1 = y1
local $bak_x2 = x2
local $bak_y2 = y2
local $bak_x3 = x3
local $bak_y3 = y3
local $bak_z3 = z3
local $bak_w3 = w3
local $bak_x4 = x4
local $bak_y4 = y4
; Pass data to the shader
x0 = $request_type
y0 = $template_id
z0 = $parent_tile_id
x1 = $first_tile_id
y1 = $last_tile_id
x2 = $create_tiles
y2 = $skip_existing_tiles
x3 = $cols_count
y3 = $rows_count
if $cols_padding == 100000
	z3 = $cols_padding
else
	z3 = $cols_padding * $screen_scaling
endif
if $rows_padding == 100000
	w3 = $rows_padding
else
	w3 = $rows_padding * $screen_scaling
endif
x4 = $anchor_x
y4 = $anchor_y
; Shader requires 1 thread per tile and has thread group size of 64 declared
; We'll need max_tiles_count / 64 thread groups total to process all the tiles
local $thread_groups_count = $max_tiles_count / 64
; Run the compute shader
Dispatch = $thread_groups_count, 1, 1
; Unbind RWBuffers
post cs-u0 = null
post cs-u1 = null
; Reset variables
run = CommandListResetVarsOfCustomShaderTileGroupWriter
; Restore IniParams:
post x0 = $bak_x0
post y0 = $bak_y0
post z0 = $bak_z0
post x1 = $bak_x1
post y1 = $bak_y1
post x2 = $bak_x2
post y2 = $bak_y2
post x3 = $bak_x3
post y3 = $bak_y3
post z3 = $bak_z3
post w3 = $bak_w3
post x4 = $bak_x4
post y4 = $bak_y4

[CommandListResetVarsOfCustomShaderTileGroupWriter]
; Request config
$request_type = 100000

$template_id = 100000
$parent_tile_id = 100000
$first_tile_id = 100000
$last_tile_id = 100000
$create_tiles = 100000
$skip_existing_tiles = 100000
$cols_count = 100000
$rows_count = 100000
$cols_padding = 100000
$rows_padding = 100000
$anchor_x = 100000
$anchor_y = 100000


; TILE FEATURES SERVICE SHADER -------------------------

; Handles special (re)actions for all tiles, like hover over, overlays, dragging and so on
; Simplifies and accelerates common GUI logic that would require tons of STORE calls otherwise
[CustomShaderTileFeaturesService]
; Load shader and explicitly unbind other shaders for safety
cs = Shaders/tile_features_service.hlsl
vs = null
ps = null
hs = null
ds = null
gs = null
; Pass RWBuffers to communicate with the shader
cs-u0 = ResourceClientInstanceData
cs-u1 = ResourceClientTilesData
; cs-u7 = ResourceDebugRW
; Backup IniParams we are about to use
local $bak_x0 = x0
local $bak_y0 = y0
local $bak_z0 = z0
local $bak_w0 = w0
; Pass a game window size and cursor relative coords to the shader
run = CommandListPassWindowInfo
; Shader requires 1 thread per tile and has thread group size of 64 declared
; We'll need max_tiles_count / 64 thread groups total to process all the tiles
local $thread_groups_count = $max_tiles_count / 64
; Run the compute shader
Dispatch = $thread_groups_count, 1, 1
; Unbind RWBuffers
post cs-u0 = null
post cs-u1 = null
; Restore IniParams:
post x0 = $bak_x0
post y0 = $bak_y0
post z0 = $bak_z0
post w0 = $bak_w0


; TILE POSITION SERVICE SHADER -------------------------

; Updates positions of all tiles based on sizes, offsets, anchors and those of parents
[CustomShaderTilePositionService]
; Load shader and explicitly unbind other shaders for safety
cs = Shaders/tile_position_service.hlsl
vs = null
ps = null
hs = null
ds = null
gs = null
; Pass RWBuffers to communicate with the shader
cs-u1 = ResourceClientTilesData
; cs-u7 = ResourceDebugRW
; Backup IniParams we are about to use
local $bak_x0 = x0
local $bak_y0 = y0
local $bak_x1 = x1
; Pass a game window size to the shader
if window_width >= 640
    x0 = window_width
    y0 = window_height
; Fall back to backup methods if user gets zeroes due to 3dmigoto bug
else if rt_width >= 640
    x0 = rt_width
    y0 = rt_height
else if res_width >= 640
    x0 = res_width
    y0 = res_height
else
    x0 = $window_width
    y0 = $window_height
endif
; Pass max length of parents chain to process in single pass
x1 = $max_parent_recursion
; Shader requires 1 thread per tile and has thread group size of 64 declared
; We'll need max_tiles_count / 64 thread groups total to process all the tiles
local $thread_groups_count = $max_tiles_count / 64
; Run the compute shader
Dispatch = $thread_groups_count, 1, 1
; Unbind RWBuffers
post cs-u0 = null
post cs-u1 = null
; Restore IniParams:
post x0 = $bak_x0
post y0 = $bak_y0
post x1 = $bak_x1


; TILE DRAW SERVICE SHADER -------------------------

; Draws all tiles on screen
[CustomShaderTileDrawService]
; Load shader and explicitly unbind other shaders for safety
cs = null
vs = Shaders/tile_draw_service.hlsl
ps = Shaders/tile_draw_service.hlsl
hs = null
ds = null
gs = Shaders/tile_draw_service.hlsl
; Disable front/back face culling so the vertices can be in any rotation
cull = none
; Use points as the primitive from the vertex shader to the geometry shader
topology = point_list
; Clear all render + depth targets to avoid compatibility issues
run = BuiltInCommandListUnbindAllRenderTargets
; Bind the back buffer as a render target. set_viewport ensures that the view
; port is the size of the buffer so the draw call will work
o0 = set_viewport bb
; Enable blending images with alpha channel (transparency support)
blend = ADD SRC_ALPHA INV_SRC_ALPHA
; Pass RWStructuredBuffers as read-only to the geometry shader (t instead of u slot)
gs-t121 = ResourceClientInstanceData
gs-t122 = ResourceClientTilesData
; Draw images
Draw = $max_layers_count, 0
; Unbind resources
post gs-t121 = null
post gs-t122 = null


; TILE READER SHADER -------------------------

; Fetches tile properties from RWBuffers to ini variables
[CustomShaderTileReader]
; Load shader and explicitly unbind other shaders for safety
cs = Shaders/tile_reader.hlsl
vs = null
ps = null
hs = null
ds = null
gs = null
; Clear output buffer
clear = ResourceTempBuffer
; Pass RWBuffers to communicate with the shader
cs-t121 = ResourceClientInstanceData
cs-t122 = ResourceClientTilesData
cs-u0 = ResourceTempBuffer
; cs-u7 = ResourceDebugRW
; Backup IniParams we are about to use
local $bak_x1 = x1
local $bak_y1 = y1
local $bak_z1 = z1
; Pass the update data to the shader
x1 = $arg_request_type
y1 = $target_tile_id
z1 = $arg_tile_var_id
; Run the compute shader
Dispatch = 1, 1, 1
; Update $return_var temp variable
$return_var = 100000
store = $return_var, ResourceTempBuffer, 33
; Reset variables
$arg_request_type = 100000
$target_tile_id = 100000
$arg_tile_var_id = 100000
; Unbind RWBuffers
post cs-t121 = null
post cs-t122 = null
post cs-u0 = null
; Restore IniParams:
post x1 = $bak_x1
post y1 = $bak_y1
post z1 = $bak_z1

[CommandListResetVarsOfCustomShaderTileReader]
$arg_request_type = 100000
$target_tile_id = 100000
$arg_tile_var_id = 100000
$return_var = 100000


; RESOURCES -------------------------

[ResourceTempBuffer]
type = buffer
format = R32_FLOAT
array = 34

; [ResourceDebugRW]
; type = RWBuffer
; format = R32G32B32A32_FLOAT
; array = 128

[ResourceClientInstanceData]

[ResourceClientTilesData]

[ResourceClientTemplatesData]


; EOF -------------------------
